<%#
/**
 * @component OnlineOfflineMode
 * @description Connection status indicator with automatic server connectivity checks
 * 
 * Features:
 * - Real-time connectivity monitoring
 * - Server reachability verification
 * - Toast notifications for offline state
 * - Periodic status checks (30s interval)
 * - Connection change event handling
 * - Graceful script loading checks
 * 
 * Dependencies:
 * - connectivityCheck.js - Server connectivity validation
 * 
 * Events Handled:
 * - online: Verifies actual server connectivity
 * - offline: Updates UI immediately
 * - periodic: Checks every 30s for status changes
 * 
 * UI Elements:
 * - Toast notification for offline state
 * - Error icon and message
 */
%>

<div class="toast toast-center m-0 p-0 w-full hidden" id="toast">
    <div class="alert alert-error w-full h-8 rounded-sm text-white flex place-content-center place-items-center items-center">
        <svg 
            xmlns="http://www.w3.org/2000/svg" 
            class="stroke-current shrink-0 h-6 w-6" 
            fill="none" 
            viewBox="0 0 24 24">
            <path 
                stroke-linecap="round" 
                stroke-linejoin="round" 
                stroke-width="2" 
                d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div>You are Offline, some functionalities may not work.</div>
    </div>
</div>

<script>
    let isOnlineStatus = false; // Start as offline until verified
    
    // Function to update UI based on connectivity status
    function updateOnlineStatus(isOnline) {
        const toast = document.getElementById('toast');
        
        if (isOnline) {
            toast.classList.add('hidden');
            console.log('✅ Status: ONLINE - Connected to server');
        } else {
            toast.classList.remove('hidden');
            console.log('❌ Status: OFFLINE - Not connected to server');
        }
        isOnlineStatus = isOnline;
    }
    
    // Initial check - verify actual connectivity on page load
    (async () => {
        console.log('═══════════════════════════════════════════');
        console.log('🔍 CONNECTIVITY CHECK - Starting...');
        console.log('📍 Navigator.onLine:', navigator.onLine);
        
        // Wait for connectivityCheck.js to be loaded
        const waitForConnectivityCheck = async (maxAttempts = 10) => {
            for (let i = 0; i < maxAttempts; i++) {
                if (typeof checkServerConnectivity === 'function') {
                    return true;
                }
                console.log(`⏳ Waiting for connectivity check script (attempt ${i+1}/${maxAttempts})...`);
                await new Promise(resolve => setTimeout(resolve, 300));
            }
            return false;
        };
        
        const isLoaded = await waitForConnectivityCheck();
        if (!isLoaded) {
            console.error('❌ ERROR: checkServerConnectivity function not found after multiple attempts!');
            console.error('Make sure connectivityCheck.js is loaded before this component');
            updateOnlineStatus(navigator.onLine);
            return;
        }
        
        const actuallyOnline = await checkServerConnectivity();
        console.log('✅ CONNECTIVITY CHECK - Complete:', actuallyOnline ? 'ONLINE' : 'OFFLINE');
        console.log('═══════════════════════════════════════════');
        updateOnlineStatus(actuallyOnline);
    })();

    window.addEventListener('online', async () => {
        console.log('🌐 Navigator reports online - verifying server connectivity...');
        // Add a small delay to let network stabilize
        await new Promise(resolve => setTimeout(resolve, 500));
        const actuallyOnline = await checkServerConnectivity();
        updateOnlineStatus(actuallyOnline);
        if (actuallyOnline) {
            console.log('✅ Confirmed: You are online and connected!');
        } else {
            console.log('⚠️  Navigator says online but server is unreachable');
        }
    });
    
    window.addEventListener('offline', () => {
        console.log('📡 Navigator reports offline');
        updateOnlineStatus(false);
    });
    
    setInterval(async () => {
        const actuallyOnline = await checkServerConnectivity();
        // Only update if status changed
        if (actuallyOnline !== isOnlineStatus) {
            console.log(`🔄 Status changed: ${isOnlineStatus ? 'ONLINE' : 'OFFLINE'} → ${actuallyOnline ? 'ONLINE' : 'OFFLINE'}`);
            updateOnlineStatus(actuallyOnline);
            
            // Don't trigger additional sync on status change 
            console.log("Status change detected by periodic check - UI updated but sync not triggered");
        }
    }, 30000); 
</script>