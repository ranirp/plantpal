/**
 * @fileoverview EJS template for the homepage of the Plant Sharing Community.
 * Features a hero section, plant gallery with sorting and filtering capabilities,
 * and handles empty states gracefully. 
 */

<!--Hero Section-->
<div class="hero-section">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="display-4 fw-bold">Plant Sharing Community</h1>
                <p class="lead">Discover, share, and discuss beautiful plants with fellow enthusiasts</p>
                <a href="/plants/new" class="btn btn-light btn-lg">
                    <i class="bi bi-plus-circle me-2"></i>Share Your Plant
                </a>
            </div>
            <div class="col-md-4 text-center">
                <i class="bi bi-flower2 display-1"></i>
            </div>
        </div>
    </div>
</div>

<!--Filter and Sort Controls-->
<div class="container mb-4">
    <div class="row">
        <div class="col-md-6">
            <h2>
                <i class="bi bi-grid me-2"></i>Plant Gallery
                <span class="badge bg-success" id="plant-count"><%= plants.length %></span>
            </h2>
        </div>
        <div class="col-md-6">
            <div class="d-flex gap-2 justify-content-md-end flex-wrap">
                <!--Sort Dropdown-->
                <div class="dropdown">
                    <button class="btn btn-outline-success dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-sort-down me-1"></i>Sort by
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="sortPlants('date-desc')">
                            <i class="bi bi-calendar-event me-2"></i>Newest First
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="sortPlants('date-asc')">
                            <i class="bi bi-calendar-event me-2"></i>Oldest First
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="sortPlants('type')">
                            <i class="bi bi-tags me-2"></i>Plant Type
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="sortPlants('name')">
                            <i class="bi bi-alphabet me-2"></i>Name A-Z
                        </a></li>
                    </ul>
                </div>

                <!--Filter Dropdown-->
                <div class="dropdown">
                    <button class="btn btn-outline-success dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-funnel me-1"></i>Filter
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="filterPlants('all')">
                            <i class="bi bi-grid me-2"></i>All Plants
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#" onclick="filterPlants('succulent')">
                            <i class="bi bi-flower3 me-2"></i>succulents
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="filterPlants('fern')">
                            <i class="bi bi-tree me-2"></i>Ferns
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="filterPlants('houseplant')">
                            <i class="bi bi-house me-2"></i>Houseplants
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="filterPlants('vegetable')">
                            <i class="bi bi-carrot me-2"></i>Vegetables
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="filterPlants('flowering')">
                            <i class="bi bi-flower1 me-2"></i>Flowering
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="filterPlants('herb')">
                            <i class="bi bi-leaf me-2"></i>Herbs
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="filterPlants('other')">
                            <i class="bi bi-question-circle me-2"></i>Other
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Plants Grid-->
<div class="container">
    <div id="plants-container">
        <% if (plants && plants.length > 0) { %>
            <div class="row g-4" id="plants-grid">
                <% plants.forEach(plant => { %>
                    <div class="col-sm-6 col-md-4 col-lg-3 plant-card-wrapper"
                    data-plant-type="<%= plant.type %>"
                    data-plant-name="<%= plant.plantName.toLowerCase() %>"
                    data-created-at="<%= plant.createdAt %>">
                    <div class="card h-100 plant-card border-0 shadow-sm">
                        <!--Plant Image-->
                        <div class="position-relative overflow-hidden" style="height: 200px;">
                            <% if (plant.photo) { %>
                                <img src="/uploads/<%= plant.photo %>" 
                                        class="card-img-top w-100 h-100 object-fit-cover"
                                        alt="<%= plant.plantName %> â€” shared by <%= plant.nickname %>"
                                        onerror="this.onerror=null;this.src='/images/placeholder-plant.jpg';this.alt='Plant image placeholder'">    
                            <% } else { %>
                                <div class="w-100 h-100 d-flex align-items-center justify-content-center bg-light">
                                    <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
                                </div>
                            <% } %>

                            <!--Plant Type Badge-->
                            <div class="position-absolute top-0 start-0 m-2">
                                <span class="badge bg-success plant-type-badge">
                                    <i class="bi bi-tag me-1"></i><%= plant.type %>
                                </span>
                            </div>
                        </div>

                        <!--Card Body-->
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-success fw-bold mb-2">
                                <%= plant.plantName %>
                            </h5>

                            <p class="card-text text-muted small mb-2 flex-grow-1">
                                <%= plant.description.length > 80 ?
                                plant.description.substring(0, 80) + '...' :
                                plant.description %>
                            </p>

                            <!--Plant Info-->
                            <div class="mb-3">
                                <small class="text-muted d-block">
                                    <i class="bi bi-person me-1"></i>
                                    by <strong><%= plant.nickname %></strong>
                                </small>
                                <small class="text-muted">
                                    <i class="bi bi-calendar3 me-1"></i>
                                    <%= new Date(plant.createdAt).toLocaleDateString() %>
                                </small>
                            </div>

                            <!--Action Button-->
                            <a href="/plants/<%= plant._id %>"
                                class="btn btn-success btn-sm mt-auto">
                                <i class="bi bi-eye me-1"></i>View Details
                            </a>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    <% } else { %>
        <!--Empty State-->
        <div class="text-center py-5" id="empty-state">
            <div class="mb-4">
                <i class="bi bi-flower1 text-muted" style="font-size: 5rem;"></i>
            </div>
            <h3 class="text-muted mb-3">No Plants Yet</h3>
            <p class="text-muted mb-4">Be the first to share a plant with the Community!</p>
            <a href="/plants/new" class="btn btn-success btn-lg">
                <i class="bi bi-plus-circle me-2"></i>Add Your First plant
            </a>
        </div>
    <% } %>

        <!--No results message (hidden by default)-->
        <div class="text-center py-5 d-none" id="no-results">
            <i class="bi bi-search text-muted mb-3" style="font-size: 3rem;"></i>
            <h4 class="text-muted">No Plants Found</h4>
            <p class="text-muted">Try adjusting your filters</p>
            <button class="btn btn-outline-success" onclick="filterPlants('all')">
                Clear Filters
            </button>
        </div>
    </div>
</div>

<!--javascript for sorting and filtering-->
<script>
    // filepath: /Users/ranik/plant-sharing-community/views/index.ejs
    // Defensive client-side sorting & filtering with accessibility and error handling

    // Safe parse of server-side plants data
    let plantsData = [];
    try {
        plantsData = JSON.parse('<%= JSON.stringify(plants || []) %>');
        if (!Array.isArray(plantsData)) plantsData = [];
    } catch (e) {
        console.error('Failed to parse plants data:', e);
        plantsData = [];
    }

    let currentFilter = 'all';

    function safeDateValue(value) {
        const t = Date.parse(value);
        return isNaN(t) ? 0 : t;
    }

    function sortPlants(criteria) {
        try {
            const grid = document.getElementById('plants-grid');
            if (!grid) {
                // Nothing to sort (maybe no plants on page)
                return;
            }

            const cards = Array.from(grid.children);
            if (!cards.length) return;

            cards.sort((a, b) => {
                const aType = (a.dataset.plantType || '').toLowerCase();
                const bType = (b.dataset.plantType || '').toLowerCase();
                const aName = (a.dataset.plantName || '').toLowerCase();
                const bName = (b.dataset.plantName || '').toLowerCase();
                const aDate = safeDateValue(a.dataset.createdAt);
                const bDate = safeDateValue(b.dataset.createdAt);

                if (criteria === 'date-desc') {
                    return bDate - aDate;
                } else if (criteria === 'date-asc') {
                    return aDate - bDate;
                } else if (criteria === 'type') {
                    return aType.localeCompare(bType);
                } else if (criteria === 'name') {
                    return aName.localeCompare(bName);
                }
                return 0;
            });

            // Re-append sorted elements
            cards.forEach(card => grid.appendChild(card));

            // Re-apply current filter without forcing another sort
            filterPlants(currentFilter, false);
        } catch (err) {
            console.error('Error while sorting plants:', err);
        }
    }

    function filterPlants(type, updateSort = true) {
        try {
            currentFilter = type || 'all';
            const grid = document.getElementById('plants-grid');
            const noResults = document.getElementById('no-results');
            let visibleCount = 0;

            if (grid) {
                const cards = Array.from(grid.children);
                cards.forEach(card => {
                    const cardType = (card.dataset.plantType || '').toLowerCase();
                    if (currentFilter === 'all' || cardType === currentFilter.toLowerCase()) {
                        card.style.display = '';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Show/hide no results message
                if (visibleCount === 0 && cards.length > 0) {
                    noResults && noResults.classList.remove('d-none');
                } else {
                    noResults && noResults.classList.add('d-none');
                }
            } else {
                // If grid doesn't exist, compute visible count from plantsData
                if (!plantsData || !plantsData.length) {
                    visibleCount = 0;
                } else if (currentFilter === 'all') {
                    visibleCount = plantsData.length;
                } else {
                    visibleCount = plantsData.filter(p => (p.type || '').toLowerCase() === currentFilter.toLowerCase()).length;
                }
            }

            // Update the plant count badge (safe DOM access)
            const countBadge = document.getElementById('plant-count');
            if (countBadge) countBadge.textContent = visibleCount;

            // Optionally re-sort after filtering (if requested)
            if (updateSort) {
                // No-op here; UI controls call sortPlants explicitly when needed.
            }
        } catch (err) {
            console.error('Error while filtering plants:', err);
        }
    }

    // Initialize counts and UI state on load
    document.addEventListener('DOMContentLoaded', () => {
        try {
            // Set initial badge: prefer actual DOM grid children if present
            const grid = document.getElementById('plants-grid');
            const countBadge = document.getElementById('plant-count');
            if (countBadge) {
                if (grid) {
                    // Only count visible children (in case server rendered hidden ones)
                    const visible = Array.from(grid.children).filter(c => c.style.display !== 'none').length;
                    countBadge.textContent = visible;
                } else {
                    countBadge.textContent = plantsData.length || 0;
                }
            }

            // Ensure no-results visibility is correct initially
            const noResults = document.getElementById('no-results');
            if (noResults) {
                const anyCards = grid && grid.children && grid.children.length > 0;
                if (!anyCards) {
                    noResults.classList.add('d-none');
                }
            }
        } catch (err) {
            console.error('Initialization error:', err);
        }
    });
</script>